package LinkedList;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class mergeSortOneList {
	static BufferedReader br=new BufferedReader(new InputStreamReader(System.in));

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		Node<Integer> head=takeInput();
		head=	mergeSort(head);
		printUsingResursion(head);
	}
	private static Node<Integer> mergeSort(Node<Integer> head) {
		// TODO Auto-generated method stub
		if (head == null || head.next == null) {
			return head;
		}

		// get the middle of the list
		Node<Integer> middle = getmiddle(head);
		Node<Integer> nextofmiddle = middle.next;

		// set the next of middle node to null
		middle.next = null;

		// Apply mergeSort on left list
		Node<Integer> left = mergeSort(head);

		// Apply mergeSort on right list
		Node<Integer> right = mergeSort(nextofmiddle);

		// Merge the left and right lists
		Node<Integer> sortedlist = sortedMerge(left, right);
		return sortedlist;

	}

	private static Node<Integer> sortedMerge(Node<Integer> a, Node<Integer> b) {
		// TODO Auto-generated method stub
		Node<Integer> result = null;
		/* Base cases */
		if (a == null)
			return b;
		if (b == null)
			return a;

		/* Pick either a or b, and recur */
		if (a.data <= b.data) {
			result = a;
			result.next = sortedMerge(a.next, b);
		}
		else {
			result = b;
			result.next = sortedMerge(a, b.next);
		}
		return result;
	}
	private static Node<Integer> getmiddle(Node<Integer> head) {
		// TODO Auto-generated method stub
		if (head == null)
			return head;

		Node<Integer> slow = head, fast = head;

		while (fast.next != null && fast.next.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;

	}
	private static void printUsingResursion(Node<Integer> head) {
		// TODO Auto-generated method stub
		if(head==null)	{
			return;
		}
		System.out.print(head.data+" ");
		printUsingResursion(head.next);
		//System.out.print(head.data+" ");
	}
	private static Node<Integer> takeInput() throws IOException {
		// TODO Auto-generated method stub
		Node<Integer> head =null,tail=null;
		String[] input=br.readLine().trim().split("\\s");
		int i=0;

		while(i<input.length&&!input[i].equals("-1")) {	
			int n= Integer.parseInt(input[i]) ;

			Node<Integer> newNode=new Node<Integer>(n);
			if(head==null) {
				head=newNode;
				tail=newNode;
			}else {
				tail.next=newNode;
				tail=newNode;
			}
			i++;
		}

		return head;
	}

}
