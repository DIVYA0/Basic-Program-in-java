package Stack;

import LinkedList.Node;

public class stackUsingLL<T> {
	private  Node<T> head;
	private int size;
	public stackUsingLL() {
		head=null;
		size=0;
	}
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		return size==0; 
	}
	public T top() throws StackEmptyException {
		// TODO Auto-generated method stub
		if(head==null) {
			throw new StackEmptyException();
		}
		return head.data;
	}
	public int size() {
		// TODO Auto-generated method stub
		return size;
	}
	public void push(T elem) {
		// TODO Auto-generated method stub
		Node<T> newNode=new Node<T>(elem);
		newNode.next=head;
		head=newNode;
		size++;

	}
	public T pop() throws StackEmptyException {
		// TODO Auto-generated method stub
		if(head==null) {
			throw new StackEmptyException();
		}
		T temp=head.data;
		head=head.next;
		size--;
		return temp;
	}


}
```````````````````````````````````````````````````````````````````````
package Stack;

public class stackUseLL {
	public static void main(String[] args) throws StackEmptyException {
		stackUsingLL<Integer> stack=new stackUsingLL<>();
		int data[]= {2, 4 ,3,5,7,7};
		for(int i=0;i<data.length;i++) {
			stack.push(data[i]);
		}
		while(!stack.isEmpty()) {
			System.out.println(stack.pop()); 
		}
//		s.push(10);
//		s.push(20);
//		System.out.println(s.pop());	
//		System.out.println(s.isEmpty()); 
//
//		System.out.println(s.size());	
//		System.out.println(s.top());	

	}
}
