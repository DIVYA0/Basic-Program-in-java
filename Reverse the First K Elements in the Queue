package queue;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class ReverseKElement {
	public static void main(String[] args) {
		Queue<Integer> q=new LinkedList<>();
		q.add(1);
		q.add(2);
		q.add(3);
		q.add(4);
		q.add(5);
		q.add(7);
		q.add(8);
		int k=4;
		q=	reverseKElement(q,k);
		while (!q.isEmpty()) {
			System.out.print(q.poll()+" ");
		}
	}

	private static Queue<Integer> reverseKElement(Queue<Integer> q, int k) {
		// TODO Auto-generated method stub
		if(k<0||k>=q.size()||q.isEmpty()) {
			return q;
		}
		int n=q.size();
		Stack<Integer> s=new Stack<>();
		for(int i=0;i<k;i++) {
			int curr=q.poll();
			s.add(curr);
		}
		while(!s.isEmpty()) {
			int curr=s.pop();
			q.add(curr);
		}
		for(int i=0;i<n-k;i++) {
			int curr=q.poll();
			q.add(curr);
		}
		return q;
	}
}
