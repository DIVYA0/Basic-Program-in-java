package LinkedList;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
public class Node<T> {
 T data;
 Node<T> next;
 public Node(T data) {
	 this.data=data;
 }
}
public class oddAfterEven {
	static BufferedReader br=new BufferedReader(new InputStreamReader(System.in));

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		Node<Integer> head=takeInput();
		head=ArrangeOddAfterEven(head);
		printUsingResursion(head);

	}
	private static void printUsingResursion(Node<Integer> head) {
		// TODO Auto-generated method stub
		if(head==null)	{
			return;
		}
		System.out.print(head.data+" ");
		printUsingResursion(head.next);
		//System.out.print(head.data+" ");
	}
	private static Node<Integer> ArrangeOddAfterEven(Node<Integer> head) {
		// TODO Auto-generated method stub
		Node<Integer> oddHead=null;
		Node<Integer> oddTail=null;
		Node<Integer> EvenHead=null;
		Node<Integer> EvenTail=null;
		Node<Integer> curr=head;
		while (curr!=null) {
			if(curr.data%2==0) {
				if(EvenHead==null) {
					EvenHead=EvenTail=curr;
				}else {
					EvenTail.next=curr;
					EvenTail=curr;
				}
			}else {
				if(oddHead==null) {
					oddHead=oddTail=curr;
				}
				else {
					oddTail.next=curr;
					oddTail=curr;
				}
			}


			curr=curr.next;
		}

		if(oddHead!=null){

			oddTail.next=EvenHead;
			if(EvenTail!=null){
				EvenTail.next=null; 
			}

			return oddHead;
		}
		else{
			EvenTail.next=null;
			return EvenHead;

		}
		//System.out.print(head.data+" ");
	}
	private static Node<Integer> takeInput() throws IOException {
		// TODO Auto-generated method stub
		Node<Integer> head =null,tail=null;
		String[] input=br.readLine().trim().split("\\s");
		int i=0;

		while(i<input.length&&!input[i].equals("-1")) {	
			int n= Integer.parseInt(input[i]) ;

			Node<Integer> newNode=new Node<Integer>(n);
			if(head==null) {
				head=newNode;
				tail=newNode;
			}else {
				tail.next=newNode;
				tail=newNode;
			}
			i++;
		}

		return head;
	}


}
