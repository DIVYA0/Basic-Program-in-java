
/* Signature of four required functions is given in the code. You can create other functions as well if you need.
*  Also you should submit your code even if you are not done with all the functions. 
*/

// Main used internally is shown here just for your reference.
/*public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		int degree1[] = new int[n];
		for(int i = 0; i < n; i++){
			degree1[i] = s.nextInt();
		}
		int coeff1[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff1[i] = s.nextInt();
		}
		Polynomial first = new Polynomial();
		for(int i = 0; i < n; i++){
			first.setCoefficient(degree1[i],coeff1[i]);
		}
		n = s.nextInt();
		int degree2[] = new int[n];
		for(int i = 0; i < n; i++){
			degree2[i] = s.nextInt();
		}
		 int coeff2[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff2[i] = s.nextInt();
		}
		Polynomial second = new Polynomial();
		for(int i = 0; i < n; i++){
			second.setCoefficient(degree2[i],coeff2[i]);
		}
		int choice = s.nextInt();
		Polynomial result;
		switch(choice){
		// Add
		case 1: 
			 result = first.add(second);
			result.print();
			break;
		// Subtract	
		case 2 :
			 result = first.subtract(second);
			result.print();
			break;
		// Multiply
		case 3 :
			 result = first.multiply(second);
			result.print();
			break;
		}

	}
  */


public class Polynomial {


    /* This function sets coefficient for a particular degree value, if degree is not there in the polynomial
	 *  then corresponding term(with specified degree and value is added int the polynomial. If the degree
	 *  is already present in the polynomial then previous coefficient is replaced by
	 *  new coefficient value passed as function argument
	*/
    int arr[];
	public Polynomial () {
		arr=new int[0];
	}
    public void setCoefficient(int degree, int Coefficient){

        int temp[];
        if(arr.length<=degree&&arr.length!=0) {
            
            temp=new int[arr.length];
            for(int i=0;i<arr.length;i++) {
                temp[i]=arr[i];
            }
            int length1=degree+1;
            arr=new int[length1];
            for(int i=0;i<temp.length;i++) {
                arr[i]=temp[i];
            }
        }
        int length=degree+1;
        if(arr.length==0) {
            arr=new int[length];
        }
        arr[degree]=Coefficient;

    }

    // Prints all the terms(only terms with non zero coefficients are to be printed) in increasing order of degree. 
    public void print(){
        int ind=this.arr.length;
        ind--;
        int i=0;
        while(i<=ind) {
            if(this.arr[i]!=0) {
                if(i!=0){
                System.out.print(this.arr[i]+"x"+i+" ");
                }
                else {
					System.out.print(this.arr[i]+" ");
				}
            }
            i++;
        }
    }


    // Adds two polynomials and returns a new polynomial which has result
    public Polynomial add(Polynomial second){
        int min=Math.min(this.arr.length, second.arr.length);
        int max=Math.max(this.arr.length, second.arr.length);
        Polynomial F3=new Polynomial();
        F3.arr=new int[max];
        int i=0;
        for(;i<min;i++) {
            F3.arr[i]=second.arr[i]+this.arr[i];
            //System.out.println(F3.arr[i]);
        }
        if(max==this.arr.length) {
            for(;i<max;i++) {
                F3.arr[i]=this.arr[i];
            }
        }else {
            for(;i<max;i++) {
                F3.arr[i]=second.arr[i];
            }
        }

    
        return F3;

    }

    // Subtracts two polynomials and returns a new polynomial which has result
    public Polynomial subtract(Polynomial second){
        int min=Math.min(this.arr.length, second.arr.length);
        int max=Math.max(this.arr.length, second.arr.length);
        Polynomial F4=new Polynomial();
        F4.arr=new int[max];
        int i=0;
        for(;i<min;i++) {
            F4.arr[i]=this.arr[i]-second.arr[i];
            //System.out.println(F4.arr[i]);
        }
        if(max==this.arr.length) {
            for(;i<max;i++) {
                F4.arr[i]=this.arr[i];
            }
        }else {
            for(;i<max;i++) {
                F4.arr[i]=(-second.arr[i]);
            }
        }

        
        return F4;

    }

    // Multiply two polynomials and returns a new polynomial which has result
    public Polynomial multiply(Polynomial second){
        Polynomial p5=new Polynomial();
        int index=(this.arr.length-1)+(second.arr.length-1)+1;
        p5.arr=new int[index];
        int min=Math.min(this.arr.length, second.arr.length);
        int max=Math.max(this.arr.length, second.arr.length);
        for(int i=0;i<min;i++) {
            for(int j=0;j<max;j++) {
                int resultIndex=i+j;
                int resultvalue;
                if(min==this.arr.length){
                    resultvalue=this.arr[i]*second.arr[j];  
                    
                    if(this.arr[i]!=0 && second.arr[j]!=0) {
                    if(p5.arr[resultIndex]==0) {
                        p5.arr[resultIndex]=resultvalue;
                    }else {
                        p5.arr[resultIndex]=p5.arr[resultIndex]+resultvalue;
                    }
                }
                }else{
                      resultvalue=this.arr[j]*second.arr[i];
                    if(this.arr[j]!=0 && second.arr[i]!=0) {
                    if(p5.arr[resultIndex]==0) {
                        p5.arr[resultIndex]=resultvalue;
                    }else {
                        p5.arr[resultIndex]=p5.arr[resultIndex]+resultvalue;
                    }
                }
                }
               
                

            }
        }
      
     
        return p5;

    }

}
