package LinkedList;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
public class Node<T> {
 T data;
 Node<T> next;
 public Node(T data) {
	 this.data=data;
 }
}
public class reverseKnodes {
	static BufferedReader br=new BufferedReader(new InputStreamReader(System.in));

	public static void main(String[] args) throws NumberFormatException, IOException {
		// TODO Auto-generated method stub
		Node<Integer> head=takeInput();
		int k=Integer.parseInt(br.readLine());
		head=reverseKnodes(head,k);
		printUsingResursion(head);
	}
	private static Node<Integer> reverseKnodes(Node<Integer> head, int k) {
		// TODO Auto-generated method stub
		if(head==null||k==0) {
			return head;
		}
		Node<Integer> curr=head;
		Node<Integer> prev=null;
		Node<Integer> next=null;
		int count=0;
		while(curr!=null && count<k) {
			next=curr.next;
			curr.next=prev;
			prev=curr;
			curr=next;
			count++;
		}
		if(next!=null) {
			head.next=reverseKnodes(next, k);
		}
		return prev;

	}
	private static void printUsingResursion(Node<Integer> head) {
		// TODO Auto-generated method stub
		if(head==null)	{
			return;
		}
		System.out.print(head.data+" ");
		printUsingResursion(head.next);
	}	
	private static Node<Integer> takeInput() throws IOException {
		// TODO Auto-generated method stub
		Node<Integer> head =null,tail=null;
		String[] input=br.readLine().trim().split("\\s");
		int i=0;

		while(i<input.length&&!input[i].equals("-1")) {	
			int n= Integer.parseInt(input[i]) ;

			Node<Integer> newNode=new Node<Integer>(n);
			if(head==null) {
				head=newNode;
				tail=newNode;
			}else {
				tail.next=newNode;
				tail=newNode;
			}
			i++;
		}

		return head;
	}
}
