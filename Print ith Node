package LinkedList;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;


public class Node<T> {
 T data;
 Node<T> next;
 public Node(T data) {
	 this.data=data;
 }
}

public class printith {
	static	BufferedReader br=new BufferedReader(new InputStreamReader(System.in));

	public static void main(String[] args) throws IOException {
		int n=Integer.parseInt(br.readLine()) ;
		Node<Integer> head=takeInput();
		System.out.println(findElement(head,n));

	}

	private static Integer findElement(Node<Integer> head, int n) {
		// TODO Auto-generated method stub
		Node<Integer> temp=head;
		int count=0;
		while(temp!=null) {
			if(count==n) {

				break;
			}
			count++;
			temp=temp.next;
		}
		return temp.data;
	}

	private static Node<Integer> takeInput() throws IOException {
		// TODO Auto-generated method stub
		Node<Integer> head=null,tail=null;
		String[] input=br.readLine().trim().split("\\s");
		int i=0;
		while(i<input.length&&!input[i].equals("-1")) {
			int n=Integer.parseInt(input[i]);
			Node<Integer> newnode=new Node<Integer>(n);
			if(head==null) {
				head=newnode;
				tail=newnode;
			}else {
				tail.next=newnode;
				tail=newnode;
			}
			i++;
		}
		return head;
	}
}
